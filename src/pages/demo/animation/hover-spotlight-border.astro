---
import Layout from '@/layouts/Layout.astro';
---

<Layout>
  <div class="container">
    <div class="card__wrapper">
      {
      Array.from({ length: 6 }, (_, i) => (
        <div class="card">
          <div class="card__img">
            <img src={`https://picsum.photos/300/200?random=${i}`} alt="">
          </div>
          <div class="card__body">
            <h2>タイトル0{i+1}</h2>
            <p>Lorem ipsum dolor sit amet consectetur.</p>
          </div>
          <div class="card__border"></div>
        </div>
      ))
    }
    </div>
  </div>
</Layout>

<style lang="scss">
  .container {
    max-width: 1200px;
    margin-inline: auto;
    padding-inline: 2rem;
    margin-block: 80px;
    @include mixin.mobile {
      margin-block: 40px;
      padding-inline: 1rem;
    }
  }

  .card {
    position: relative;
    padding: 1rem;
    border: 1px solid #e4e4e7;
    border-radius: 0.5rem;
    @include mixin.mobile {
      padding: 0.5rem;
    }
    &__wrapper {
      display: grid;
      gap: 0.5rem;
      grid-template-columns: repeat(3, 1fr);
      @include mixin.mobile {
        grid-template-columns: repeat(2, 1fr);
      }
    }
    &__border {
      --border-x: 0px;
      -border-y: 0px;
      position: absolute;
      top: -1px;
      left: -1px;
      width: calc(100% + 2px);
      height: calc(100% + 2px);
      background: transparent;
      border-radius: 0.5rem;
      pointer-events: none;
      border: 1px solid #2B80FF;
      mask-image: radial-gradient(30% 50px at var(--border-x) var(--border-y), black 45%, transparent);
      opacity: 0;
      transition-property: opacity;
      transition-duration: 0.4s;
    }
    &__body {
      margin-top: 0.5rem;
      h2 {
        @include mixin.mobile {
          font-size: 1rem;
        }
      }
      p {
        @include mixin.mobile {
          font-size: 0.75rem;
        }
      }
    }
  }
</style>

<script>
  const cards = document.querySelectorAll('.card');

  cards.forEach(card => {
    const border = card.querySelector('.card__border') as HTMLElement;

    card.addEventListener('mousemove', (e: MouseEvent) => {
      const rect = card.getBoundingClientRect();
      const x = e.clientX - rect.left;
      const y = e.clientY - rect.top;
      border.style.setProperty('--border-x', `${x}px`);
      border.style.setProperty('--border-y', `${y}px`);
    })

    card.addEventListener('mouseenter', () => {
        border.style.opacity = '1';
      });

    card.addEventListener('mouseleave', () => {
      border.style.opacity = '0';
    });
  });
</script>